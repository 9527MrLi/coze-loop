// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/cozeloop/backend/modules/foundation/infra/repo/mysql (interfaces: IUserDao)
//
// Generated by this command:
//
//	mockgen -destination=mocks/user_dao.go -package=mocks . IUserDao
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/cozeloop/backend/infra/db"
	model "github.com/coze-dev/cozeloop/backend/modules/foundation/infra/repo/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserDao is a mock of IUserDao interface.
type MockIUserDao struct {
	ctrl     *gomock.Controller
	recorder *MockIUserDaoMockRecorder
	isgomock struct{}
}

// MockIUserDaoMockRecorder is the mock recorder for MockIUserDao.
type MockIUserDaoMockRecorder struct {
	mock *MockIUserDao
}

// NewMockIUserDao creates a new mock instance.
func NewMockIUserDao(ctrl *gomock.Controller) *MockIUserDao {
	mock := &MockIUserDao{ctrl: ctrl}
	mock.recorder = &MockIUserDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserDao) EXPECT() *MockIUserDaoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserDao) Create(ctx context.Context, user *model.User, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, user}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUserDaoMockRecorder) Create(ctx, user any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, user}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserDao)(nil).Create), varargs...)
}

// FindByEmail mocks base method.
func (m *MockIUserDao) FindByEmail(ctx context.Context, email string, opts ...db.Option) (*model.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, email}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByEmail", varargs...)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockIUserDaoMockRecorder) FindByEmail(ctx, email any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, email}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockIUserDao)(nil).FindByEmail), varargs...)
}

// FindByUniqueName mocks base method.
func (m *MockIUserDao) FindByUniqueName(ctx context.Context, uniqueName string, opts ...db.Option) (*model.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, uniqueName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByUniqueName", varargs...)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUniqueName indicates an expected call of FindByUniqueName.
func (mr *MockIUserDaoMockRecorder) FindByUniqueName(ctx, uniqueName any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, uniqueName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUniqueName", reflect.TypeOf((*MockIUserDao)(nil).FindByUniqueName), varargs...)
}

// GetByID mocks base method.
func (m *MockIUserDao) GetByID(ctx context.Context, userID int64, opts ...db.Option) (*model.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, userID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIUserDaoMockRecorder) GetByID(ctx, userID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, userID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIUserDao)(nil).GetByID), varargs...)
}

// MGetByIDs mocks base method.
func (m *MockIUserDao) MGetByIDs(ctx context.Context, userIDs []int64, opts ...db.Option) ([]*model.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, userIDs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetByIDs", varargs...)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetByIDs indicates an expected call of MGetByIDs.
func (mr *MockIUserDaoMockRecorder) MGetByIDs(ctx, userIDs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, userIDs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetByIDs", reflect.TypeOf((*MockIUserDao)(nil).MGetByIDs), varargs...)
}

// Save mocks base method.
func (m *MockIUserDao) Save(ctx context.Context, user *model.User, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, user}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIUserDaoMockRecorder) Save(ctx, user any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, user}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIUserDao)(nil).Save), varargs...)
}

// Update mocks base method.
func (m *MockIUserDao) Update(ctx context.Context, userID int64, updates map[string]any, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, userID, updates}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUserDaoMockRecorder) Update(ctx, userID, updates any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, userID, updates}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserDao)(nil).Update), varargs...)
}
